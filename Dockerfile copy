# ARG specifies the ROS distribution, defaulting to jazzy
ARG ROS_DISTRO="humble"

# Base Image: ROS 2 Jazzy (Ubuntu 24.04 Noble)
# Corrected: Use ros:jazzy directly, as it's the primary tag for ROS Jazzy on Ubuntu 24.04 (Noble)
FROM ros:${ROS_DISTRO}
                             # As of June 2025, the ROS 2 Jazzy images might be `ros:jazzy` or `ros:jazzy-noble`.
                              # Please double-check the official ROS Docker Hub for the exact tag for Jazzy.
                              # For now, I'm using `ros:jazzy-humble` as a placeholder, but it might be `ros:jazzy` or `ros:jazzy-noble`.

# Set shell to bash and enable sourcing in RUN commands
SHELL ["/bin/bash", "-c"]

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# --- System and ROS Dependency Installation ---

# 1. Set up the Gazebo package repository from osrfoundation.org
# This is required to find and install Gazebo Ionic.
RUN apt-get update && apt-get install -y --no-install-recommends \
    lsb-release \
    wget \
    gnupg \
 && wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \
 && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null \
 && rm -rf /var/lib/apt/lists/*


# 2. Update and install all system dependencies in a single layer for efficiency.
# This includes build tools, python libraries, Gazebo Ionic, and ROS integration packages.
# First, install essential build tools and system libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libeigen3-dev \
    libserial-dev \
    libtinyxml2-dev \
    python3-colcon-common-extensions \
    python3-pip \
    python3-rosdep \
    python3-serial \
    python3-vcstool \
    python3-venv \
    xauth \
    xvfb \
 && rm -rf /var/lib/apt/lists/*

# Second, install the large ROS and Gazebo packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    gz-fortress \
    libgz-sim7-dev \
    ros-humble-ros-gz \
 && rm -rf /var/lib/apt/lists/*

 RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-ros2-controllers \
    ros-humble-controller-manager \
 && rm -rf /var/lib/apt/lists/*
# 3. Initialize and update rosdep
# This downloads the database of ROS package dependencies.
RUN rosdep init || true
RUN rosdep update --rosdistro ${ROS_DISTRO}

# --- Workspace Setup and Build ---

# Create and set the working directory for the ROS 2 workspace

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential

WORKDIR /ros2_ws

# Copy your local source code into the image
# This assumes your Dockerfile is in the root of your project, and your code is in './src'
COPY ./src ./src

# Install all dependencies for the copied source code
RUN apt-get update && \
    source /opt/ros/${ROS_DISTRO}/setup.bash && \
    rosdep install --from-paths src --ignore-src -y -r --rosdistro ${ROS_DISTRO} && \
    rm -rf /var/lib/apt/lists/*

# Build the entire ROS 2 workspace, skipping specified packages
RUN source /opt/ros/${ROS_DISTRO}/setup.bash && \
    colcon build --symlink-install --event-handlers console_direct+ --cmake-args -DCMAKE_BUILD_TYPE=Release --packages-skip admittance_controller ros2_controllers

# --- Container Configuration and Entrypoint ---

# Copy the entrypoint script into the image and make it executable
COPY ./entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set ROS environment variables if needed
ENV ROS_DOMAIN_ID=30
ENV RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# Set the entrypoint for the container
ENTRYPOINT ["/entrypoint.sh"]

# Default command to run when the container starts
CMD ["bash"]